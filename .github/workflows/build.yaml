name: Build Binaries

on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    container: golang:1
    strategy:
      matrix:
        GOOS: ["linux", "darwin", "windows"]
        GOARCH: ["amd64", "arm64"]
    steps:
      - uses: actions/checkout@v3

      - name: Build Binary
        env:
          GOOS: ${{ matrix.GOOS }}
          GOARCH: ${{ matrix.GOARCH }}
        run: make build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dns-introducer-healthcheck-${{ matrix.GOOS }}-${{ matrix.GOARCH }}
          path: ${{ github.workspace }}/bin/dns-introducer-healthcheck*

  installers:
    runs-on: ubuntu-latest
    needs:
      - build
    strategy:
      matrix:
        GOOS: ["linux"]
        GOARCH: ["amd64", "arm64"]
    steps:
      - name: Install fpm
        run: sudo gem install fpm

      - uses: actions/download-artifact@v3
        with:
          name: dns-introducer-healthcheck-${{ matrix.GOOS }}-${{ matrix.GOARCH }}
          path: artifacts

      - name: Get tag name
        if: startsWith(github.ref, 'refs/tags/')
        id: tag-name
        run: |
          echo "::set-output name=TAG_NAME::$(echo ${{ github.ref }} | cut -d'/' -f 3)"

      - name: Generate .deb
        run: |
          chmod +x artifacts/dns-introducer-healthcheck
          fpm -s dir -t deb --prefix /usr/local/bin --chdir artifacts -n dns-introducer-healthcheck -a ${{ matrix.GOARCH }} -v "${{ steps.tag-name.outputs.TAG_NAME || github.sha }}" .
          mkdir -p installer-out
          mv *.deb installer-out/

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: installer-dns-introducer-healthcheck-${{ matrix.GOOS }}-${{ matrix.GOARCH }}
          path: ${{ github.workspace }}/installer-out/*.deb

  release:
    runs-on: ubuntu-latest
    needs:
      - installers
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Show artifacts
        run: tree artifacts

      - name: Generate artifact zips
        run: |
          cd ${{ github.workspace }}/artifacts || exit 1
          DIRS=$(find . -type d -name 'dns-introducer-healthcheck*')
          while IFS= read -r dir; do
            echo "Creating zip for $dir..."
            zip -r $dir.zip $dir
          done <<< "$DIRS"

      - name: Get tag name
        if: startsWith(github.ref, 'refs/tags/')
        id: tag-name
        run: |
          TAG_NAME=$(echo ${{ github.ref }} | cut -d'/' -f 3)
          echo "TAG_NAME=$TAG_NAME" >>$GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >>$GITHUB_OUTPUT

      - name: Upload release artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          FILES=$(find ${{ github.workspace }}/artifacts -type f -name 'dns-introducer-healthcheck*.zip')
          while IFS= read -r file; do
            gh release upload \
              $TAG_NAME \
              $ARTIFACT
          done <<< "$FILES"

          gh release upload \
            $TAG_NAME \
            artifacts/installer-dns-introducer-healthcheck*/*.deb

      - name: Trigger apt repo update
        run: |
          curl -s -XPOST -H "Authorization: Bearer ${{ secrets.GLUE_ACCESS_TOKEN }}" --data '{"release_version":"${{ steps.tag-name.outputs.TAG_NAME }}"}' ${{ secrets.GLUE_API_URL }}/api/v1/dns-introducer-healthcheck/${{ github.sha }}/start
          curl -s -XPOST -H "Authorization: Bearer ${{ secrets.GLUE_ACCESS_TOKEN }}" --data '{"release_version":"${{ steps.tag-name.outputs.TAG_NAME }}"}' ${{ secrets.GLUE_API_URL }}/api/v1/dns-introducer-healthcheck/${{ github.sha }}/success/deploy
